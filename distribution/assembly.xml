<assembly>
    <!--<id>bin</id>-->
    <!-- We dont use the <id> element to avoid the extension to the directory
         and zip name -->
    <formats>
        <format>dir</format>
        <!--<format>zip</format>-->
    </formats>
    <includeBaseDirectory>false</includeBaseDirectory>
    <files>
        <!-- Copy the project's parent pom so we can correctly install Rio jars into the local repository -->
        <file>
            <source>${basedir}/../pom.xml</source>
            <outputDirectory>/config/poms</outputDirectory>
            <destName>rio-main-${project.version}.pom</destName>
        </file>
        <!-- Copy the Gnostic pom so we can correctly install Gnostic jars into the local repository -->
        <file>
            <source>${basedir}/../rio-services/gnostic/pom.xml</source>
            <outputDirectory>/config/poms</outputDirectory>
            <destName>rio-gnostic-${project.version}.pom</destName>
        </file>
    </files>
    <fileSets>

        <fileSet>
            <directory>${basedir}/..</directory>
            <includes>
                <include>LICENSE.txt</include>
                <include>NOTICE.txt</include>
                <include>index.html</include>
            </includes>
            <outputDirectory>/</outputDirectory>
        </fileSet>

        <!-- bin directory -->
        <fileSet>
            <directory>${basedir}/../bin</directory>
            <includes>
                <include>*</include>
            </includes>
            <filtered>true</filtered>
            <fileMode>0755</fileMode>
            <outputDirectory>/bin</outputDirectory>
        </fileSet>

        <!-- docs directory -->
        <fileSet>
            <directory>${basedir}/../docs</directory>
            <includes>
                <include>**</include>
            </includes>
            <outputDirectory>/docs</outputDirectory>
        </fileSet>

        <!-- examples zip -->
        <fileSet>
            <directory>${basedir}/target/staging/examples</directory>
            <includes>
                <include>examples.zip</include>
            </includes>
            <outputDirectory>/</outputDirectory>
        </fileSet>

        <!-- policy directory -->
        <fileSet>
            <directory>${basedir}/src/main/policy</directory>
            <includes>
                <include>policy.all</include>
                <include>rio.policy</include>
            </includes>
            <fileMode>0644</fileMode>
            <outputDirectory>/policy</outputDirectory>
        </fileSet>

        <!-- Configuration files -->
        <fileSet>
            <directory>${basedir}/src/main/config</directory>
            <outputDirectory>/config</outputDirectory>
            <includes>
                <include>**/*</include>
            </includes>
            <filtered>true</filtered>
        </fileSet>

        <!-- Hyperic -->
        <fileSet>
            <!-- WHY DOESNT settings.localRepository WORK HERE??? -->
            <directory>
                ${user.home}/.m2/repository/org/hyperic/sigar-dist/${hyperic.version}/sigar-dist-${hyperic.version}/hyperic-sigar-1.6.3/sigar-bin/lib
            </directory>
            <fileMode>0644</fileMode>
            <outputDirectory>/lib/hyperic</outputDirectory>
            <excludes>
                <exclude>junit.jar</exclude>
                <exclude>log4j.jar</exclude>
            </excludes>
        </fileSet>

    </fileSets>

    <dependencySets>
        <!-- The lib directory are service implementation jars and their transitive requirements -->
        <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <excludes>
                <exclude>net.jini:jsk-dl</exclude>
                <exclude>net.jini.lookup:serviceui</exclude>
                <exclude>org.apache.river:reggie-dl</exclude>
                <exclude>org.rioproject.cybernode:cybernode-api:jar</exclude>
                <exclude>org.rioproject.cybernode:cybernode-proxy:jar</exclude>
                <exclude>org.rioproject.cybernode:cybernode-ui:jar</exclude>
                <exclude>org.rioproject.event-collector:event-collector-api:jar</exclude>
                <exclude>org.rioproject.event-collector:event-collector-proxy:jar</exclude>
                <exclude>org.rioproject.gnostic:gnostic-api:jar</exclude>
                <exclude>org.rioproject.monitor:monitor-api:jar</exclude>
                <exclude>org.rioproject.monitor:monitor-proxy:jar</exclude>
                <exclude>org.rioproject:rio-api:jar</exclude>
                <exclude>org.rioproject:rio-proxy:jar</exclude>
                <exclude>org.rioproject:watch-ui</exclude>
                <exclude>org.rioproject:rio-logging-support:jar</exclude>
                <exclude>junit:junit</exclude>
                <exclude>ant:*</exclude>
                <exclude>jline:*</exclude>
                <exclude>org.codehaus.izpack:*</exclude>
                <exclude>*:oar</exclude>
                <exclude>*:zip</exclude>
                <!-- The following exclusions are for the resolver(s) and it's dependencies -->
                <exclude>org.rioproject.resolver:resolver-aether</exclude>
                <exclude>org.rioproject.resolver:resolver-project</exclude>
                <exclude>org.eclipse.*</exclude>
                <exclude>org.apache.maven:*</exclude>
                <exclude>org.apache.maven.wagon:*</exclude>
                <exclude>org.apache.httpcomponents:*</exclude>
                <exclude>org.codehaus.plexus:*</exclude>
                <exclude>org.sonatype.plexus:*</exclude>
                <exclude>aopalliance:*</exclude>
                <exclude>commons-codec:*</exclude>
                <exclude>asm:*</exclude>
                <exclude>nekohtml:*</exclude>
                <exclude>javax.annotation:*:*</exclude>
                <exclude>javax.enterprise:*:*</exclude>
                <exclude>javax.inject:*:*</exclude>
                <exclude>org.sonatype.sisu:*:*</exclude>
                <exclude>com.google.guava:*:*</exclude>
                <exclude>com.google.code.findbugs:*</exclude>
                <!-- The following exclusions are for gnostic and it's dependencies -->
                <exclude>org.codehaus.janino:*</exclude>
                <exclude>org.drools:*</exclude>
                <exclude>antlr:*</exclude>
                <exclude>org.eclipse.jdt.core.compiler:*</exclude>
                <exclude>org.mvel:*</exclude>
                <exclude>org.slf4j:*</exclude>
                <exclude>ch.qos.logback:*</exclude>
            </excludes>
            <outputDirectory>lib</outputDirectory>
        </dependencySet>

        <!-- Get jsk-dl.jar, reggie-dl.jar and serviceui.jar into the lib-dl directory -->
        <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <includes>
                <include>net.jini:jsk-dl</include>
                <include>net.jini.lookup:serviceui</include>
                <include>org.apache.river:reggie-dl</include>
            </includes>
            <outputDirectory>lib-dl</outputDirectory>
        </dependencySet>

        <!-- The rest of the service download (-api, -proxy and -ui) jars go into the lib-dl directory -->
        <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <includes>
                <include>org.rioproject.cybernode:cybernode-api:jar</include>
                <include>org.rioproject.cybernode:cybernode-proxy:jar</include>
                <include>org.rioproject.cybernode:cybernode-ui:jar</include>
                <include>org.rioproject.gnostic:gnostic-api:jar</include>
                <include>org.rioproject.monitor:monitor-api:jar</include>
                <include>org.rioproject.monitor:monitor-proxy:jar</include>
                <include>org.rioproject.event-collector:event-collector-api:jar</include>
                <include>org.rioproject.event-collector:event-collector-proxy:jar</include>
                <include>org.rioproject:rio-api:jar</include>
                <include>org.rioproject:rio-proxy:jar</include>
                <include>org.rioproject:watch-ui</include>
            </includes>
            <outputDirectory>lib-dl</outputDirectory>
        </dependencySet>

        <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <useStrictFiltering>true</useStrictFiltering>
            <includes>
                <include>org.rioproject.resolver:resolver-aether</include>
                <include>org.rioproject.resolver:resolver-project</include>
            </includes>
            <outputDirectory>lib/resolver</outputDirectory>
        </dependencySet>

        <!-- Put Rio Appender jar and the SLF4J jars into lib/logging, defaulting to logback -->
        <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <useStrictFiltering>true</useStrictFiltering>
            <includes>
                <include>org.rioproject:rio-logging-support</include>
                <include>org.slf4j:slf4j-api</include>
                <include>ch.qos.logback:logback-core</include>
                <include>ch.qos.logback:logback-classic</include>
            </includes>
            <outputDirectory>lib/logging</outputDirectory>
        </dependencySet>

        <!-- Put the LogBack jars into lib/logging/logback -->
        <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <useStrictFiltering>true</useStrictFiltering>
            <includes>
                <include>ch.qos.logback:logback-core</include>
                <include>ch.qos.logback:logback-classic</include>
            </includes>
            <outputDirectory>lib/logging/logback</outputDirectory>
        </dependencySet>

        <!-- Put the JUL jars into lib/logging/jul -->
        <dependencySet>
            <useProjectArtifact>false</useProjectArtifact>
            <useStrictFiltering>true</useStrictFiltering>
            <includes>
                <include>org.slf4j:slf4j-jdk14</include>
            </includes>
            <outputDirectory>lib/logging/jul</outputDirectory>
        </dependencySet>

    </dependencySets>

</assembly>